21. Merge Two Sorted Lists

Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.


Cpp solutions


istNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
	
	// Iterative
	/*
	if(l1 == NULL)
		return l2;
	if(l2 == NULL)
		return l1;
	ListNode* p1 = l1;
	ListNode* p2 = l2;
	ListNode* t = NULL;
	while(p1 != NULL && p2 != NULL)
	{
		if (p1->val <= p2->val)
		{
			t = p1;
			p1 = p1->next;
		}
		else
		{
			if(t != NULL)
				t->next = p2;
			t = p2;
			p2 = p2->next;
			t->next = p1;
		}
	}
	if(p1 == NULL)
	{
		t->next = p2;
	}
	if(l1->val <= l2->val)
		return l1;
	else
		return l2;
	*/
	
	
	
	// Recursive
	if (l1 == NULL) return l2;
	if (l2 == NULL) return l1;
	
	if (l1->val <= l2->val) {
		l1->next = mergeTwoLists(l1->next, l2);
		return l1;
	}
	else {
		l2->next = mergeTwoLists(l1, l2->next);
		return l2;
	}
}



JavaScript solution

var mergeTwoLists = function(l1, l2) {
    if (l1 === null) return l2;
    if (l2 === null) return l1;
    
    if (l1.val <= l2.val) {
        l1.next = mergeTwoLists(l1.next, l2);
        return l1;
    }
    else {
        l2.next = mergeTwoLists(l1, l2.next);
        return l2;
    }
};