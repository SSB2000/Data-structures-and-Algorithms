268. Missing Number

Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.

Follow up: Could you implement a solution using only O(1) extra space complexity and O(n) runtime complexity?

Input: nums = [3,0,1]
Output: 2
Explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.


Cpp

int missingNumber(vector<int>& nums) {
	int res{};
	
	// By Brute force searching O(n^2).
	/*
	for(int i = 0; i <= nums.size(); ++i) {
		int flag = 0;
		for(int j : nums) if(i == j) { flag = 1; break; }
		if(flag == 0) { res = i; break; }
	}
	*/
	
	
	
	
	
	return res;
}


int missingNumber(vector<int>& nums) {
	int res{};
	
	// By Addition

	/*
	int len = nums.size() + 1;
	int sumTotal = ((len * (len + 1)) / 2) - len;
	int sumCurrent = 0;
	for(int i : nums) sumCurrent += i;
	res = sumTotal - sumCurrent;        
	*/
}

int missingNumber(vector<int>& nums) {
	int res{};
	// Using Sorting
	
	/*
	sort(nums.begin(), nums.end());
	for(int i = 0; i <= nums.size(); ++i) {
		if(i == nums.size()) res = i;
		if(i < nums.size() && nums[i] != i) { res = i; break; }
	}
	*/
}