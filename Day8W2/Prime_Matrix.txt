//Minimum number of operations required to make all elements of at least one row of given Matrix prime

#include <iostream>
#include <bits/stdc++.h>

using namespace std;

bool isPrime(const int &num) {
  int i = 2;
  if(num == 1) return false;
  for(i = 2; i <= sqrt(num); i++) {
    if(num % i == 0) return false;
  }
  return true;
}

int minToPrime(int num) {
  int res = 0;
  while(!isPrime(num)) {
    num++;
    res++; 
  }
  
  return res;
}

int main() {
  int row, col;
  int i, j;

  /* Test Case 1 */
  /* Answer: 3 */
  // row = 2; col = 3;
  // vector<vector<int>> mat = {
  //   {4, 8, 8},
  //   {9, 2, 9}
  // };

	/* Test Case 2 */
  /* Answer: 1 */
  // row = 2; col = 3;
  // vector<vector<int>> mat = {
  //   {1, 2, 3},
  //   {5, 6, 1},
  //   {4, 4, 1}
  // };

	/* Test Case 3 */
  /* Answer: 0 */
  row = 2; col = 2;
  vector<vector<int>> mat = {
    {1, 3},
    {4, 2}
  };


	/* Take Input */
  /*
   cin >> row >> col;
  vector<vector<int>> mat(row, vector<int>(col, 0));
  for(i = 0; i < row; i++) {
    for(j = 0; j < col; j++) {
      cin >> mat[i][j];
    }
  }
  */

	vector<int> minimunPrime;
  for(i = 0; i < row; i++) {
    int sum = 0;
    for(j = 0; j < col; j++) {
      sum += minToPrime(mat[i][j]);
    }
    minimunPrime.push_back(sum);
  }

	for(j = 0; j < col; j++) {
    int sum = 0;
    for(i = 0; i < row; i++) {
      sum += minToPrime(mat[i][j]);
    }
    minimunPrime.push_back(sum);
  }

	cout << *min_element (minimunPrime.begin(), minimunPrime.end());

  return 0;
}