191. Number of 1 Bits

Write a function that takes an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight).

Note:
    Note that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.
    In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 3, the input represents the signed integer. -3.


Input: n = 00000000000000000000000000001011
Output: 3
Explanation: The input binary string 00000000000000000000000000001011 has a total of three '1' bits.

int hammingWeight(uint32_t n) {
	// Masking to 1. As of example {1010 & 0001} will be non-zero but {0101 & 0001} will be zero and we count the this right most 1 and we right shift.
	
	/*
	int res{};
	while(n) {
		if((n & 1) != 0) ++res;
		n = n >> 1;
	}

	return res;
	*/
}

int hammingWeight(uint32_t n) {
	// Masking to highest uint32_t as {10000....001011 & 1000.....000} should result in non-zero value and we count and right shift.
	
	/*
	int res{};
	uint32_t max = 2147483648;
	while(n) {
		if((n & max) != 0) ++res;
		n = n << 1;
	}
	*/

	return res;
}